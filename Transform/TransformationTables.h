#pragma once

#include <unordered_map>
#include <string>

// This contains all 40 transformation characters for horizontal mirror
typedef const std::unordered_map<int, int> HorizontalMirror;
HorizontalMirror transform_keys_h = 
{
	{49,48},		// 1 -> 0
	{48,49},		// 0 -> 1
	{50,57},		// 2 -> 9
	{57,50},		// 9 -> 2
	{51,56},		// 3 -> 8
	{56,51},		// 8 -> 3
	{52,57},		// 4 -> 7
	{57,52},		// 7 -> 4
	{53,54},		// 5 -> 6
	{54,53},		// 6 -> 5
	{113,112},		// q -> p
	{112,113},		// p -> q
	{119,111},		// w -> o
	{111,119},		// o -> w
	{101,105},		// e -> i
	{105,101},		// i -> e
	{114,117},		// r -> u
	{117,114},		// u -> r
	{116,121},		// t -> y
	{121,116},		// y -> t
	{97,59},		// a -> ;
	{59,97},		// ; -> a
	{115,108},		// s -> l
	{108,115},		// l -> s
	{100,107},		// d -> k
	{107,100},		// k -> d
	{102,106},		// f -> j
	{106,102},		// j -> f
	{103,104},		// g -> h
	{104,103},		// h -> g
	{122,47},		// z -> /
	{47,122},		// / -> z
	{120,46},		// x -> .
	{46,120},		// . -> x
	{99,44},		// c -> ,
	{44,99},		// , -> c
	{118,109},		// v -> m
	{109,118},		// m -> v
	{98,110},		// b -> n
	{110,98}		// n -> b
};

// This contains all 40 transformation characters for vertical mirror
typedef const std::unordered_map<int, int> VerticalMirror;
VerticalMirror transform_keys_v =
{
	{49,122},		// 1 -> z
	{122,49},		// z -> 1
	{113,97},		// q -> a
	{97,113},		// a -> q
	{50,120},		// 2 -> x
	{120,50},		// x -> 2
	{119,115},		// w -> s
	{115,119},		// s -> w
	{51,99},		// 3 -> c
	{99,51},		// c-> 3
	{101,100},		// e -> d
	{100,101},		// d -> e
	{52,118},		// 4 -> v
	{118,52},		// v -> 4
	{114,102},		// r -> f
	{102,114},		// f -> r
	{53,98},		// 5 -> b
	{98,53},		// b -> 5
	{116,103},		// t -> g
	{103,116},		// g -> t
	{54,110},		// 6 -> n
	{110,54},		// n -> 6
	{121,104},		// y -> h
	{104,121},		// h -> y
	{55,109},		// 7 -> m
	{109,55},		// m -> 7
	{117,106},		// u -> j
	{106,117},		// j -> u
	{56,44},		// 8 -> ,
	{44,56},		// , -> 8
	{105,107},		// i -> k
	{107,105},		// k -> i
	{57,46},		// 9 -> .
	{46,57},		// . -> 9
	{111,108},		// o -> l
	{108,111},		// l -> o
	{48,47},		// 0 -> /
	{47,48},		// / -> 0
	{112,59},		// p -> ;
	{59,112},		// ; -> p
};

// This contains value as number(index) for each 40 characters.
typedef const std::unordered_map<int, int> KeyboardMapping;
KeyboardMapping keylocationNum = 
{
	{49,1},			// 1 -> [1]
	{50,2},			// 2 -> [2]
	{51,3},			// 3 -> [3]
	{52,4},			// 4 -> [4]
	{53,5},			// 5 -> [5]
	{54,6},			// 6 -> [6]
	{55,7},			// 7 -> [7]
	{56,8},			// 8 -> [8]
	{57,9},			// 9 -> [9]
	{48,10},		// 0 -> [10]
	{113,11},		// q -> [11]
	{119,12},		// w -> [12]
	{101,13},		// e -> [13]
	{114,14},		// r -> [14]
	{116,15},		// t -> [15]
	{121,16},		// y -> [16]
	{117,17},		// u -> [17]
	{105,18},		// i -> [18]
	{111,19},		// o -> [19]
	{112,20},		// p -> [20]
	{97,21},		// a -> [21]
	{115,22},		// s -> [22]
	{100,23},		// d -> [23]
	{102,24},		// f -> [24]
	{103,25},		// g -> [25]
	{104,26},		// h -> [26]
	{106,27},		// j -> [27]
	{107,28},		// k -> [28]
	{108,29},		// l -> [29]
	{59,30},		// ; -> [30]
	{122,31},		// z -> [31]
	{120,32},		// x -> [32]
	{99,33},		// c -> [33]
	{118,34},		// v -> [34]
	{98,35},		// b -> [35]
	{110,36},		// n -> [36]
	{109,37},		// m -> [37]
	{44,38},		// , -> [38]
	{46,39},		// . -> [39]
	{47,40}			// / -> [40]
};

// Using array Index it get character value.
// Here index 0 has dummy value because by default array indexing start with zero. In this case, 
// we are only interested in value from index 1 to 41.
const int IndexOfKeys[41] =
{
	-1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 113, 119, 101, 114, 116, 121, 117, 105, 111, 112, 97, 115, 100,102, 103,
	104, 106, 107, 108, 59, 122, 120, 99, 118, 98, 110, 109, 44, 46, 47
};
	
	
